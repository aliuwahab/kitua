## Autogenerated by Scribe. DO NOT MODIFY.

name: 'Payment Requests'
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/v1/payment-requests
    metadata:
      groupName: 'Payment Requests'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get all payment requests'
      description: ''
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      sort:
        name: sort
        description: 'Data field(s) to sort by. Separate multiple fields with commas. Denote descending sort with a minus sign.'
        required: false
        example: 'sort=amount,-created_at'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'filter[status]':
        name: 'filter[status]'
        description: 'Filter by status: pending, paid, cancelled, expired.'
        required: false
        example: pending
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'filter[amount][gte]':
        name: 'filter[amount][gte]'
        description: 'numeric Filter by minimum amount.'
        required: false
        example: '100'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'filter[amount][lte]':
        name: 'filter[amount][lte]'
        description: 'numeric Filter by maximum amount.'
        required: false
        example: '500'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'filter[purpose]':
        name: 'filter[purpose]'
        description: 'Filter by purpose. Wildcards are supported.'
        required: false
        example: '*lunch*'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'filter[created_at][gte]':
        name: 'filter[created_at][gte]'
        description: 'date Filter by minimum creation date.'
        required: false
        example: '2025-01-01'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      include:
        name: include
        description: 'Include related resources. Available: author,recipient.'
        required: false
        example: author
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'fields[paymentRequest]':
        name: 'fields[paymentRequest]'
        description: 'Comma-separated list of fields to include.'
        required: false
        example: 'amount,purpose,status'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      per_page:
        name: per_page
        description: 'Number of results per page. Default is 15.'
        required: false
        example: 10
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      page:
        name: page
        description: 'Page number. Default is 1.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      sort: 'sort=amount,-created_at'
      'filter[status]': pending
      'filter[amount][gte]': '100'
      'filter[amount][lte]': '500'
      'filter[purpose]': '*lunch*'
      'filter[created_at][gte]': '2025-01-01'
      include: author
      'fields[paymentRequest]': 'amount,purpose,status'
      per_page: 10
      page: 1
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": [
              {
                "type": "paymentRequest",
                "id": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                "attributes": {
                  "amount": "150.00",
                  "formattedAmount": "GHS 150.00",
                  "currencyCode": "GHS",
                  "purpose": "Lunch payment",
                  "isNegotiable": false,
                  "status": "pending",
                  "expiresAt": "2025-09-15T12:00:00Z",
                  "paidAt": null,
                  "isExpired": false,
                  "createdAt": "2025-08-01T10:15:30Z",
                  "updatedAt": "2025-08-01T10:15:30Z"
                },
                "relationships": {
                  "author": {
                    "data": {
                      "type": "user",
                      "id": 1
                    },
                    "links": {
                      "self": "/api/v1/users/1"
                    }
                  }
                },
                "links": {
                  "self": "/api/v1/payment-requests/f47ac10b-58cc-4372-a567-0e02b2c3d479"
                }
              },
              {
                "type": "paymentRequest",
                "id": "a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11",
                "attributes": {
                  "amount": "200.00",
                  "formattedAmount": "GHS 200.00",
                  "currencyCode": "GHS",
                  "purpose": "Office supplies",
                  "isNegotiable": false,
                  "status": "paid",
                  "expiresAt": null,
                  "paidAt": "2025-08-01T09:20:15Z",
                  "isExpired": false,
                  "createdAt": "2025-07-28T14:30:45Z",
                  "updatedAt": "2025-08-01T09:20:15Z"
                },
                "relationships": {
                  "author": {
                    "data": {
                      "type": "user",
                      "id": 2
                    },
                    "links": {
                      "self": "/api/v1/users/2"
                    }
                  }
                },
                "links": {
                  "self": "/api/v1/payment-requests/a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11"
                }
              }
            ],
            "links": {
              "first": "https://kitua.com/api/v1/payment-requests?page=1",
              "last": "https://kitua.com/api/v1/payment-requests?page=3",
              "prev": null,
              "next": "https://kitua.com/api/v1/payment-requests?page=2"
            },
            "meta": {
              "current_page": 1,
              "from": 1,
              "last_page": 3,
              "path": "https://kitua.com/api/v1/payment-requests",
              "per_page": 15,
              "to": 15,
              "total": 35
            }
          }
        headers: []
        description: Success
        custom: []
      -
        status: 401
        content: |-
          {
            "message": "Unauthenticated.",
            "status": 401
          }
        headers: []
        description: Unauthenticated
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/payment-requests
    metadata:
      groupName: 'Payment Requests'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Create a payment request'
      description: 'Creates a new payment request record. Users can only create payment requests for themselves.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      amount:
        name: amount
        description: 'The amount of the payment request.'
        required: true
        example: '150'
        type: numeric
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      currency_code:
        name: currency_code
        description: 'Must be 3 characters.'
        required: true
        example: bng
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      purpose:
        name: purpose
        description: 'The purpose of the payment request (max 100 chars).'
        required: true
        example: 'Lunch payment'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      description:
        name: description
        description: 'optional A longer description of the payment request.'
        required: false
        example: 'Payment for team lunch at the cafeteria'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      is_negotiable:
        name: is_negotiable
        description: ''
        required: false
        example: true
        type: boolean
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      status:
        name: status
        description: ''
        required: false
        example: expired
        type: string
        enumValues:
          - pending
          - paid
          - cancelled
          - expired
        exampleWasSpecified: false
        nullable: false
        custom: []
      expires_at:
        name: expires_at
        description: 'optional The date and time when the payment request expires. If not provided, defaults to 30 days from creation.'
        required: false
        example: '2025-09-15T12:00:00Z'
        type: datetime
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      metadata:
        name: metadata
        description: 'optional Additional metadata for the payment request.'
        required: false
        example:
          restaurant: 'Cafe Royal'
          receipt_number: RCT-12345
        type: object
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      image:
        name: image
        description: 'optional An image to attach to the payment request (jpg, png, pdf). Maximum size: 5MB.'
        required: false
        example: null
        type: file
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      negotiable:
        name: negotiable
        description: 'optional Whether the amount is negotiable. Default is false.'
        required: false
        example: true
        type: boolean
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      amount: '150'
      currency_code: bng
      purpose: 'Lunch payment'
      description: 'Payment for team lunch at the cafeteria'
      is_negotiable: true
      status: expired
      expires_at: '2025-09-15T12:00:00Z'
      metadata:
        restaurant: 'Cafe Royal'
        receipt_number: RCT-12345
      negotiable: true
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
            "data": {
              "type": "paymentRequest",
              "id": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
              "attributes": {
                "amount": "150.00",
                "formattedAmount": "GHS 150.00",
                "currencyCode": "GHS",
                "purpose": "Lunch payment",
                "description": "Payment for team lunch at the cafeteria",
                "isNegotiable": false,
                "status": "pending",
                "expiresAt": "2025-09-15T12:00:00Z",
                "paidAt": null,
                "isExpired": false,
                "metadata": {
                  "restaurant": "Cafe Royal",
                  "receipt_number": "RCT-12345"
                },
                "createdAt": "2025-08-15T10:15:30Z",
                "updatedAt": "2025-08-15T10:15:30Z"
              },
              "relationships": {
                "author": {
                  "data": {
                    "type": "user",
                    "id": 1
                  },
                  "links": {
                    "self": "/api/v1/users/1"
                  }
                }
              },
              "links": {
                "self": "/api/v1/payment-requests/f47ac10b-58cc-4372-a567-0e02b2c3d479"
              }
            }
          }
        headers: []
        description: 'Created successfully'
        custom: []
      -
        status: 401
        content: |-
          {
            "message": "Unauthenticated.",
            "status": 401
          }
        headers: []
        description: Unauthenticated
        custom: []
      -
        status: 422
        content: |-
          {
            "message": "Validation failed",
            "errors": {
              "amount": ["The amount field is required."],
              "purpose": ["The purpose field is required."]
            },
            "status": 422
          }
        headers: []
        description: 'Validation error'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/payment-requests/{uuid_id}'
    metadata:
      groupName: 'Payment Requests'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Show a specific payment request'
      description: 'Display an individual payment request by its UUID. Users can only view their own payment requests.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      uuid_id:
        name: uuid_id
        description: 'The ID of the uuid.'
        required: true
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      uuid:
        name: uuid
        description: 'The UUID of the payment request.'
        required: true
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      uuid_id: architecto
      uuid: f47ac10b-58cc-4372-a567-0e02b2c3d479
    queryParameters:
      include:
        name: include
        description: 'Include related resources. Available: author.'
        required: false
        example: author
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      include: author
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": {
              "type": "paymentRequest",
              "id": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
              "attributes": {
                "amount": "150.00",
                "formattedAmount": "GHS 150.00",
                "currencyCode": "GHS",
                "purpose": "Lunch payment",
                "description": "Payment for team lunch",
                "isNegotiable": false,
                "status": "pending",
                "expiresAt": "2025-09-15T12:00:00Z",
                "paidAt": null,
                "isExpired": false,
                "metadata": {
                  "restaurant": "Cafe Royal",
                  "receipt_number": "RCT-12345"
                },
                "createdAt": "2025-08-01T10:15:30Z",
                "updatedAt": "2025-08-01T10:15:30Z"
              },
              "relationships": {
                "author": {
                  "data": {
                    "type": "user",
                    "id": 1
                  },
                  "links": {
                    "self": "/api/v1/users/1"
                  }
                }
              },
              "links": {
                "self": "/api/v1/payment-requests/f47ac10b-58cc-4372-a567-0e02b2c3d479"
              }
            }
          }
        headers: []
        description: Success
        custom: []
      -
        status: 401
        content: |-
          {
            "message": "Unauthenticated.",
            "status": 401
          }
        headers: []
        description: Unauthenticated
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "Payment request not found",
            "status": 404
          }
        headers: []
        description: 'Not found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/v1/payment-requests/{uuid_id}'
    metadata:
      groupName: 'Payment Requests'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete payment request'
      description: |-
        Remove the specified payment request from storage. Users can only delete their own payment requests,
        and paid payment requests cannot be deleted.
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      uuid_id:
        name: uuid_id
        description: 'The ID of the uuid.'
        required: true
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      uuid:
        name: uuid
        description: 'The UUID of the payment request.'
        required: true
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      uuid_id: architecto
      uuid: f47ac10b-58cc-4372-a567-0e02b2c3d479
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": {
              "deleted_at": "2025-08-15T13:45:30Z"
            },
            "message": "Payment request deleted successfully",
            "status": 200
          }
        headers: []
        description: 'Deleted successfully'
        custom: []
      -
        status: 401
        content: |-
          {
            "message": "Unauthenticated.",
            "status": 401
          }
        headers: []
        description: Unauthenticated
        custom: []
      -
        status: 403
        content: |-
          {
            "message": "Failed to delete payment request: Cannot delete a paid payment request",
            "status": 403
          }
        headers: []
        description: 'Paid payment request'
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "Payment request not found",
            "status": 404
          }
        headers: []
        description: 'Not found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/v1/payment-requests/{uuid_id}'
    metadata:
      groupName: 'Payment Requests'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Replace Payment Request'
      description: |-
        Completely replace the specified payment request (PUT method). All fields must be provided.
        Users can only replace their own payment requests, and paid payment requests cannot be replaced.
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_TOKEN}'
      Content-Type: multipart/form-data
      Accept: application/json
    urlParameters:
      uuid_id:
        name: uuid_id
        description: 'The ID of the uuid.'
        required: true
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      uuid:
        name: uuid
        description: 'The UUID of the payment request.'
        required: true
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      uuid_id: architecto
      uuid: f47ac10b-58cc-4372-a567-0e02b2c3d479
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      amount:
        name: amount
        description: 'The amount of the payment request.'
        required: true
        example: '250'
        type: numeric
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      currency_code:
        name: currency_code
        description: 'Must be 3 characters.'
        required: true
        example: bng
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      purpose:
        name: purpose
        description: 'The purpose of the payment request.'
        required: true
        example: 'Replaced lunch payment'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      description:
        name: description
        description: 'A longer description of the payment request.'
        required: true
        example: 'Completely replaced payment for team lunch'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      is_negotiable:
        name: is_negotiable
        description: ''
        required: false
        example: false
        type: boolean
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      status:
        name: status
        description: ''
        required: false
        example: paid
        type: string
        enumValues:
          - pending
          - paid
          - cancelled
          - expired
        exampleWasSpecified: false
        nullable: false
        custom: []
      expires_at:
        name: expires_at
        description: 'The date and time when the payment request expires.'
        required: true
        example: '2025-11-15T12:00:00Z'
        type: datetime
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      metadata:
        name: metadata
        description: ''
        required: false
        example: null
        type: object
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      image:
        name: image
        description: 'Must be an image. Must not be greater than 2048 kilobytes.'
        required: false
        example: null
        type: file
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      negotiable:
        name: negotiable
        description: 'Whether the amount is negotiable.'
        required: true
        example: false
        type: boolean
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      amount: '250'
      currency_code: bng
      purpose: 'Replaced lunch payment'
      description: 'Completely replaced payment for team lunch'
      is_negotiable: false
      status: paid
      expires_at: '2025-11-15T12:00:00Z'
      negotiable: false
    fileParameters:
      image: null
    responses:
      -
        status: 200
        content: |-
          {
            "data": {
              "type": "paymentRequest",
              "id": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
              "attributes": {
                "amount": "250.00",
                "formattedAmount": "GHS 250.00",
                "currencyCode": "GHS",
                "purpose": "Replaced lunch payment",
                "description": "Completely replaced payment for team lunch",
                "isNegotiable": false,
                "status": "pending",
                "expiresAt": "2025-11-15T12:00:00Z",
                "paidAt": null,
                "isExpired": false,
                "metadata": null,
                "createdAt": "2025-08-01T10:15:30Z",
                "updatedAt": "2025-08-15T12:30:15Z"
              },
              "relationships": {
                "author": {
                  "data": {
                    "type": "user",
                    "id": 1
                  },
                  "links": {
                    "self": "/api/v1/users/1"
                  }
                }
              },
              "links": {
                "self": "/api/v1/payment-requests/f47ac10b-58cc-4372-a567-0e02b2c3d479"
              }
            }
          }
        headers: []
        description: 'Replaced successfully'
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "Payment request not found",
            "status": 404
          }
        headers: []
        description: 'Not found'
        custom: []
      -
        status: 422
        content: |-
          {
            "message": "Validation failed",
            "errors": {
              "amount": ["The amount field is required."],
              "purpose": ["The purpose field is required."]
            },
            "status": 422
          }
        headers: []
        description: 'Validation error'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PATCH
    uri: 'api/v1/payment-requests/{uuid_id}'
    metadata:
      groupName: 'Payment Requests'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update Payment Request'
      description: |-
        Partially update the specified payment request (PATCH method). Only provided fields will be updated.
        Users can only update their own payment requests, and paid payment requests cannot be updated.
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      uuid_id:
        name: uuid_id
        description: 'The ID of the uuid.'
        required: true
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      uuid:
        name: uuid
        description: 'The UUID of the payment request.'
        required: true
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      uuid_id: architecto
      uuid: f47ac10b-58cc-4372-a567-0e02b2c3d479
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      amount:
        name: amount
        description: 'optional The amount of the payment request.'
        required: false
        example: '200'
        type: numeric
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      currency_code:
        name: currency_code
        description: 'Must be 3 characters.'
        required: false
        example: bng
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      purpose:
        name: purpose
        description: 'optional The purpose of the payment request.'
        required: false
        example: 'Updated lunch payment'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      description:
        name: description
        description: 'optional A longer description of the payment request.'
        required: false
        example: 'Updated payment for team lunch'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      is_negotiable:
        name: is_negotiable
        description: ''
        required: false
        example: false
        type: boolean
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      status:
        name: status
        description: ''
        required: false
        example: paid
        type: string
        enumValues:
          - pending
          - paid
          - cancelled
          - expired
        exampleWasSpecified: false
        nullable: false
        custom: []
      expires_at:
        name: expires_at
        description: 'optional The date and time when the payment request expires.'
        required: false
        example: '2025-10-15T12:00:00Z'
        type: datetime
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      metadata:
        name: metadata
        description: 'optional Additional metadata for the payment request.'
        required: false
        example:
          restaurant: 'Updated Cafe'
          receipt_number: RCT-67890
        type: object
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      image:
        name: image
        description: 'optional A new image to attach to the payment request.'
        required: false
        example: null
        type: file
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      remove_image:
        name: remove_image
        description: 'optional Whether to remove the existing image.'
        required: false
        example: true
        type: boolean
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      negotiable:
        name: negotiable
        description: 'optional Whether the amount is negotiable.'
        required: false
        example: true
        type: boolean
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      amount: '200'
      currency_code: bng
      purpose: 'Updated lunch payment'
      description: 'Updated payment for team lunch'
      is_negotiable: false
      status: paid
      expires_at: '2025-10-15T12:00:00Z'
      metadata:
        restaurant: 'Updated Cafe'
        receipt_number: RCT-67890
      remove_image: true
      negotiable: true
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": {
              "type": "paymentRequest",
              "id": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
              "attributes": {
                "amount": "200.00",
                "formattedAmount": "GHS 200.00",
                "currencyCode": "GHS",
                "purpose": "Updated lunch payment",
                "description": "Updated payment for team lunch",
                "isNegotiable": true,
                "status": "pending",
                "expiresAt": "2025-10-15T12:00:00Z",
                "paidAt": null,
                "isExpired": false,
                "metadata": {
                  "restaurant": "Updated Cafe",
                  "receipt_number": "RCT-67890"
                },
                "createdAt": "2025-08-01T10:15:30Z",
                "updatedAt": "2025-08-15T11:20:45Z"
              },
              "relationships": {
                "author": {
                  "data": {
                    "type": "user",
                    "id": 1
                  },
                  "links": {
                    "self": "/api/v1/users/1"
                  }
                }
              },
              "links": {
                "self": "/api/v1/payment-requests/f47ac10b-58cc-4372-a567-0e02b2c3d479"
              }
            }
          }
        headers: []
        description: 'Updated successfully'
        custom: []
      -
        status: 401
        content: |-
          {
            "message": "Unauthenticated.",
            "status": 401
          }
        headers: []
        description: Unauthenticated
        custom: []
      -
        status: 403
        content: |-
          {
            "message": "Cannot update a paid payment request",
            "status": 403
          }
        headers: []
        description: 'Paid payment request'
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "Payment request not found",
            "status": 404
          }
        headers: []
        description: 'Not found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
